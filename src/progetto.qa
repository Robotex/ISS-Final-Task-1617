System progetto

Dispatch move		:	move(D)
Dispatch speed		:	speed(S)
Dispatch sAlarm		:	sAlarm(A)
Event cmd			:	cmd(X)
Event inputcmd		:	usercmd(executeInput(X))
Event usercmd		:	usercmd(MOVE)
Event unityAddr		:	unityAddr(X)
Event alarm			:	alarm(X)
Event obstacle		:	obstacle(X)
Event sonarDetect 	:	sonarDetect(X)
Event sonar 		:	sonar(SONAR, TARGET, DISTANCE)

Context ctxProgetto ip [host='localhost' port=8010] -httpserver

QActor console context ctxProgetto{
	Plan init normal[println("Console started")] switchTo loop
	
	Plan loop []
	transition stopAfter 600000
		whenEvent alarm -> handleAlarm,
		whenEvent cmd -> handleCmd,
		whenEvent usercmd -> handleUserCmd,
		whenEvent inputcmd -> handleInputCmd
	finally repeatPlan
		
	Plan handleCmd resumeLastPlan[
		println("cmd detected");
		onEvent cmd : cmd(start) -> println("Need to start");
		onEvent cmd : cmd('stop') -> println("Need to stop");
		onEvent cmd : cmd('close') -> switchTo close
	]
	Plan close[
		emit cmd:cmd('close');
		println("Closing")
	]
	
	Plan handleUserCmd resumeLastPlan[
		println('usercmd detected');
		onEvent usercmd : usercmd(robotgui(w(X))) -> forward robot -m move : move('w');
		onEvent usercmd : usercmd(robotgui(a(X))) -> forward robot -m move : move('a');
		onEvent usercmd : usercmd(robotgui(d(X))) -> forward robot -m move : move('d');
		onEvent usercmd : usercmd(robotgui(s(X))) -> forward robot -m move : move('s');
		onEvent usercmd : usercmd(robotgui(h(X))) -> forward robot -m move : move('h');
		onEvent usercmd : usercmd(X) -> println(X);
		onEvent usercmd : usercmd(robotgui(X)) -> println(X)
		
	]
	
	Plan handleInputCmd resumeLastPlan[
		println("inputcmd detected");
		onEvent inputcmd : X -> println(X);
		onEvent inputcmd : usercmd(executeInput(connectToUnity(X))) -> emit unityAddr : unityAddr(X);
		onEvent inputcmd : usercmd(executeInput(close)) -> switchTo close
	]
	
	Plan handleAlarm resumeLastPlan[
		println("alarm detected");
		onEvent alarm : alarm(fire) -> forward robot -m sAlarm : sAlarm(F)
	]
}

QActor robot context ctxProgetto{
	Plan init normal[println("Robot started")] switchTo loop
	
	Plan loop [
		
	] 
	transition stopAfter 600000
		whenMsg move -> handleMove,
		whenMsg sAlarm -> handleAlarm,
		whenEvent cmd -> handleCmd,
		whenEvent alarm -> handleAlarm,
		whenEvent obstacle -> handleObstacle,
		whenEvent unityAddr -> connectToUnityStatic
	finally repeatPlan
	
	Plan connectToUnityStatic resumeLastPlan [
		printCurrentEvent;
		onEvent unityAddr : unityAddr(X)->println("X");
		onEvent unityAddr : unityAddr(X) -> connectUnity "X";//"192.168.1.201";
		
		//onEvent unityAddr : unityAddr(X) -> actorOp workWithUnity(X);
		//actorOp createSimulatedActor("rover","Prefabs/CustomActor");
		createUnityObject "rover" ofclass "Prefabs/CustomActor" ;
		
  		backwards 70 time ( 800 ) ;    	   
   	    right 70 time ( 1000 ) ;  //position
 		addRule unityOn 
	]
	
	Plan handleCmd resumeLastPlan[
		onEvent cmd : cmd('close') -> switchTo close
	]
	
	Plan close[
		println("Robot closing")
	]
	
	Plan handleMove resumeLastPlan[
		println("Robot handling movements");
		onMsg move : move('w') ->switchTo moveForward;
		onMsg move : move('a') ->switchTo moveLeft;
		onMsg move : move('d') ->switchTo moveRight;
		onMsg move : move('s') ->switchTo moveBackward;
		onMsg move : move('h') ->switchTo hault 
	]
	
	Plan endOfMove resumeLastPlan [println("endOfMove")]
	
	Plan handleTout [println("handleTout")]
		
	Plan moveForward resumeLastPlan[
		println("Robot moving forward")
		
	]
	reactive onward 50 time (1000)
		whenEnd -> endOfMove
		whenTout 1000000 -> handleTout
		whenEvent alarm -> handleAlarm
	
	Plan moveBackward resumeLastPlan[
		println("Robot moving backward");
		backwards 50 time (1000)
	]
	
	Plan moveLeft resumeLastPlan[
		println("Robot moving left");
		left 50 time (1000)
	]
	
	Plan rotateLeft resumeLastPlan[
		println("Robot rotate left");
		left 50 time (1000)
	]
	
	Plan moveRight resumeLastPlan[
		println("Robot moving right");
		right 50 time (1000)
	]
	
	Plan rotateRight resumeLastPlan[
		println("Robot rotating right");
		right 50 time (1000)
	]
	
	Plan hault resumeLastPlan[
		println("Robot is stopping");
		stop 50 time (1000)
		
	]
	
	Plan handleAlarm resumeLastPlan [
		printCurrentEvent;
		println("Robot handling alarm");
		onEvent alarm : alarm(fire) -> switchTo handleFire
	]
	
	Plan handleFire resumeLastPlan [
		println("Robot fire simulated");
		switchTo hault
	]
	
	Plan handleObstacle resumeLastPlan [
		println("Robot obstacle simulated")
		
	]
	
	
	
	
		
	Plan connectToUnity resumeLastPlan[println("connection to Unity requested")]
}

QActor sonar context ctxProgetto{
	Plan init normal[println("Sonar ready")] switchTo loop
	
	Plan loop[
		printCurrentEvent
	]
	transition stopAfter 600000
		whenEvent cmd -> handleCmd,
		whenEvent sonar -> handleSonar,
		whenEvent sonarDetect -> handleObject
	finally repeatPlan
	
	Plan handleCmd resumeLastPlan[
		onEvent cmd : cmd('close') -> switchTo close
	]
	
	Plan close [println('sonar closing')]
		
		
	Plan handleSonar resumeLastPlan[
		println("sonar handling itself");
		onEvent sonar : sonar(sonar1,TARGET,DISTANCE) -> println(TARGET);
		onEvent sonar : sonar(sonar2,TARGET,DISTANCE) -> println(TARGET)
	]
	
	Plan handleObject resumeLastPlan[
		println("sonar handling object");
		onEvent sonarDetect : sonarDetect(X) -> println(X)
	]
}

 