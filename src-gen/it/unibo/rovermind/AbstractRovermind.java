/* Generated by AN DISI Unibo */ 
package it.unibo.rovermind;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractRovermind extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractRovermind(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/rovermind/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");
			this.planFilePath = "./srcMore/it/unibo/rovermind/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("handleCommands",handleCommands);
	    	stateTab.put("execMove",execMove);
	    	stateTab.put("stage1",stage1);
	    	stateTab.put("stage1_repeat",stage1_repeat);
	    	stateTab.put("stage1_obstacleAvoidingManagement",stage1_obstacleAvoidingManagement);
	    	stateTab.put("stage1_evaluateDetection",stage1_evaluateDetection);
	    	stateTab.put("stage1_managingFixedObject_loop_begin",stage1_managingFixedObject_loop_begin);
	    	stateTab.put("stage1_managingFixedObject_loop_firstRotation",stage1_managingFixedObject_loop_firstRotation);
	    	stateTab.put("stage1_managingFixedObject_loop_avoiding",stage1_managingFixedObject_loop_avoiding);
	    	stateTab.put("stage1_managingFixedObject_loop_edgeDetected",stage1_managingFixedObject_loop_edgeDetected);
	    	stateTab.put("stage1_managingFixedObject_loop_edgeDetected_backward",stage1_managingFixedObject_loop_edgeDetected_backward);
	    	stateTab.put("stage1_managingFixedObject_endloop",stage1_managingFixedObject_endloop);
	    	stateTab.put("stage2",stage2);
	    	stateTab.put("handleAlarm",handleAlarm);
	    	stateTab.put("handleTout",handleTout);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "rovermind tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	temporaryStr = "\"Rover mind started\"";
	    	println( temporaryStr );  
	    	//switchTo handleCommands
	        switchToPlanAsNextState(pr, myselfName, "rovermind_"+myselfName, 
	              "handleCommands",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun handleCommands = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_handleCommands",0);
	     pr.incNumIter(); 	
	    	String myselfName = "handleCommands";  
	    	//bbb
	     msgTransition( pr,myselfName,"rovermind_"+myselfName,false,
	          new StateFun[]{stateTab.get("execMove") }, 
	          new String[]{"true","M","moveRover" },
	          60000, "handleTout" );//msgTransition
	    }catch(Exception e_handleCommands){  
	    	 println( getName() + " plan=handleCommands WARNING:" + e_handleCommands.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleCommands
	    
	    StateFun execMove = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("execMove",-1);
	    	String myselfName = "execMove";  
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("cmd(start)");
	    	if( currentMessage != null && currentMessage.msgId().equals("moveRover") && 
	    		pengine.unify(curT, Term.createTerm("cmd(CMD)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		//println("WARNING: variable substitution not yet fully implemented " ); 
	    		{//actionseq
	    		temporaryStr = "run";
	    		addRule( temporaryStr );  
	    		temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmd(CMD)","cmd(move(\"right\",40,750))", guardVars ).toString();
	    		sendMsg("moveRover","rover", QActorContext.dispatch, temporaryStr ); 
	    		};//actionseq
	    	}
	    	//switchTo stage1
	        switchToPlanAsNextState(pr, myselfName, "rovermind_"+myselfName, 
	              "stage1",false, true, " !?run"); 
	    }catch(Exception e_execMove){  
	    	 println( getName() + " plan=execMove WARNING:" + e_execMove.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//execMove
	    
	    StateFun stage1 = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_stage1",0);
	     pr.incNumIter(); 	
	    	String myselfName = "stage1";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??run" )) != null ){
	    	{//actionseq
	    	temporaryStr = "\"Going forward with stage1\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmd(CMD)","cmd(move(\"forward\",20,0))", guardVars ).toString();
	    	sendMsg("moveRover","rover", QActorContext.dispatch, temporaryStr ); 
	    	};//actionseq
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"rovermind_"+myselfName,false,
	          new StateFun[]{stateTab.get("handleAlarm"), stateTab.get("stage1_obstacleAvoidingManagement") }, 
	          new String[]{"true","E","alarm", "true","E","sonarDetect" },
	          25000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_stage1){  
	    	 println( getName() + " plan=stage1 WARNING:" + e_stage1.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//stage1
	    
	    StateFun stage1_repeat = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("stage1_repeat",-1);
	    	String myselfName = "stage1_repeat";  
	    	temporaryStr = "run";
	    	addRule( temporaryStr );  
	    	repeatPlanNoTransition(pr,myselfName,"rovermind_"+myselfName,false,true);
	    }catch(Exception e_stage1_repeat){  
	    	 println( getName() + " plan=stage1_repeat WARNING:" + e_stage1_repeat.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//stage1_repeat
	    
	    StateFun stage1_obstacleAvoidingManagement = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("stage1_obstacleAvoidingManagement",-1);
	    	String myselfName = "stage1_obstacleAvoidingManagement";  
	    	temporaryStr = "\"obstacleAvoidingManagement\"";
	    	println( temporaryStr );  
	    	temporaryStr = "run";
	    	addRule( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmd(CMD)","cmd(move(\"stop\",20,0))", guardVars ).toString();
	    	sendMsg("moveRover","rover", QActorContext.dispatch, temporaryStr ); 
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(1500,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "stage1_obstacleAvoidingManagement";
	    	if( ! aar.getGoon() ) return ;
	    	//bbb
	     msgTransition( pr,myselfName,"rovermind_"+myselfName,true,
	          new StateFun[]{stateTab.get("handleAlarm") }, 
	          new String[]{"true","E","alarm" },
	          500, "stage1_evaluateDetection" );//msgTransition
	    }catch(Exception e_stage1_obstacleAvoidingManagement){  
	    	 println( getName() + " plan=stage1_obstacleAvoidingManagement WARNING:" + e_stage1_obstacleAvoidingManagement.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//stage1_obstacleAvoidingManagement
	    
	    StateFun stage1_evaluateDetection = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("stage1_evaluateDetection",-1);
	    	String myselfName = "stage1_evaluateDetection";  
	    	temporaryStr = "\"Evaluating: done\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"rovermind_"+myselfName,false,
	          new StateFun[]{stateTab.get("handleAlarm"), stateTab.get("stage1_managingFixedObject_loop_begin") }, 
	          new String[]{"true","E","alarm", "true","E","sonarDetect" },
	          500, "stage1" );//msgTransition
	    }catch(Exception e_stage1_evaluateDetection){  
	    	 println( getName() + " plan=stage1_evaluateDetection WARNING:" + e_stage1_evaluateDetection.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//stage1_evaluateDetection
	    
	    StateFun stage1_managingFixedObject_loop_begin = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("stage1_managingFixedObject_loop_begin",-1);
	    	String myselfName = "stage1_managingFixedObject_loop_begin";  
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("sonarDetect(NAME)");
	    	if( currentEvent != null && currentEvent.getEventId().equals("sonarDetect") && 
	    		pengine.unify(curT, Term.createTerm("sonarDetect(X)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			String parg = "detected(NAME)";
	    			/* Print */
	    			parg =  updateVars( Term.createTerm("sonarDetect(X)"), 
	    			                    Term.createTerm("sonarDetect(NAME)"), 
	    				    		  	Term.createTerm(currentEvent.getMsg()), parg);
	    			if( parg != null ) println( parg );
	    	}
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmd(CMD)","cmd(move(\"backward\",20,1000))", guardVars ).toString();
	    	sendMsg("moveRover","rover", QActorContext.dispatch, temporaryStr ); 
	    	//bbb
	     msgTransition( pr,myselfName,"rovermind_"+myselfName,false,
	          new StateFun[]{stateTab.get("handleAlarm") }, 
	          new String[]{"true","E","alarm" },
	          1000, "stage1_managingFixedObject_loop_firstRotation" );//msgTransition
	    }catch(Exception e_stage1_managingFixedObject_loop_begin){  
	    	 println( getName() + " plan=stage1_managingFixedObject_loop_begin WARNING:" + e_stage1_managingFixedObject_loop_begin.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//stage1_managingFixedObject_loop_begin
	    
	    StateFun stage1_managingFixedObject_loop_firstRotation = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("stage1_managingFixedObject_loop_firstRotation",-1);
	    	String myselfName = "stage1_managingFixedObject_loop_firstRotation";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " not !?leftEdge" )) != null )
	    	{
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmd(CMD)","cmd(move(\"left\",40,750))", guardVars ).toString();
	    	sendMsg("moveRover","rover", QActorContext.dispatch, temporaryStr ); 
	    	}
	    	else{ temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmd(CMD)","cmd(move(\"right\",40,750))", guardVars ).toString();
	    	sendMsg("moveRover","rover", QActorContext.dispatch, temporaryStr ); 
	    	}
	    	//switchTo stage1_managingFixedObject_loop_avoiding
	        switchToPlanAsNextState(pr, myselfName, "rovermind_"+myselfName, 
	              "stage1_managingFixedObject_loop_avoiding",false, false, null); 
	    }catch(Exception e_stage1_managingFixedObject_loop_firstRotation){  
	    	 println( getName() + " plan=stage1_managingFixedObject_loop_firstRotation WARNING:" + e_stage1_managingFixedObject_loop_firstRotation.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//stage1_managingFixedObject_loop_firstRotation
	    
	    StateFun stage1_managingFixedObject_loop_avoiding = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_stage1_managingFixedObject_loop_avoiding",0);
	     pr.incNumIter(); 	
	    	String myselfName = "stage1_managingFixedObject_loop_avoiding";  
	    	temporaryStr = "\"Avoiding fixed obstacle\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmd(CMD)","cmd(move(\"forward\",20,0))", guardVars ).toString();
	    	sendMsg("moveRover","rover", QActorContext.dispatch, temporaryStr ); 
	    	//bbb
	     msgTransition( pr,myselfName,"rovermind_"+myselfName,false,
	          new StateFun[]{stateTab.get("handleAlarm"), stateTab.get("stage1_managingFixedObject_loop_edgeDetected") }, 
	          new String[]{"true","E","alarm", " not !?leftEdge"  
	          ,"E","sonarDetect" },
	          2000, "stage1_managingFixedObject_endloop" );//msgTransition
	    }catch(Exception e_stage1_managingFixedObject_loop_avoiding){  
	    	 println( getName() + " plan=stage1_managingFixedObject_loop_avoiding WARNING:" + e_stage1_managingFixedObject_loop_avoiding.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//stage1_managingFixedObject_loop_avoiding
	    
	    StateFun stage1_managingFixedObject_loop_edgeDetected = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("stage1_managingFixedObject_loop_edgeDetected",-1);
	    	String myselfName = "stage1_managingFixedObject_loop_edgeDetected";  
	    	temporaryStr = "\"left edge detected\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmd(CMD)","cmd(move(\"stop\",40,0))", guardVars ).toString();
	    	sendMsg("moveRover","rover", QActorContext.dispatch, temporaryStr ); 
	    	temporaryStr = "edgeDetected";
	    	addRule( temporaryStr );  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " not !?leftEdge" )) != null )
	    	{
	    	temporaryStr = "leftEdge";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	addRule( temporaryStr );  
	    	}
	    	else{ temporaryStr = "leftEdge";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	removeRule( temporaryStr );  
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"rovermind_"+myselfName,false,
	          new StateFun[]{stateTab.get("handleAlarm") }, 
	          new String[]{"true","E","alarm" },
	          400, "stage1_managingFixedObject_loop_edgeDetected_backward" );//msgTransition
	    }catch(Exception e_stage1_managingFixedObject_loop_edgeDetected){  
	    	 println( getName() + " plan=stage1_managingFixedObject_loop_edgeDetected WARNING:" + e_stage1_managingFixedObject_loop_edgeDetected.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//stage1_managingFixedObject_loop_edgeDetected
	    
	    StateFun stage1_managingFixedObject_loop_edgeDetected_backward = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("stage1_managingFixedObject_loop_edgeDetected_backward",-1);
	    	String myselfName = "stage1_managingFixedObject_loop_edgeDetected_backward";  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmd(CMD)","cmd(move(\"backward\",20,1000))", guardVars ).toString();
	    	sendMsg("moveRover","rover", QActorContext.dispatch, temporaryStr ); 
	    	//bbb
	     msgTransition( pr,myselfName,"rovermind_"+myselfName,false,
	          new StateFun[]{stateTab.get("handleAlarm") }, 
	          new String[]{"true","E","alarm" },
	          1000, "stage1_managingFixedObject_endloop" );//msgTransition
	    }catch(Exception e_stage1_managingFixedObject_loop_edgeDetected_backward){  
	    	 println( getName() + " plan=stage1_managingFixedObject_loop_edgeDetected_backward WARNING:" + e_stage1_managingFixedObject_loop_edgeDetected_backward.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//stage1_managingFixedObject_loop_edgeDetected_backward
	    
	    StateFun stage1_managingFixedObject_endloop = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("stage1_managingFixedObject_endloop",-1);
	    	String myselfName = "stage1_managingFixedObject_endloop";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??edgeDetected" )) != null ){
	    	{//actionseq
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?leftEdge" )) != null ){
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmd(CMD)","cmd(move(\"right\",40,750))", guardVars ).toString();
	    	sendMsg("moveRover","rover", QActorContext.dispatch, temporaryStr ); 
	    	}
	    	else{ temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmd(CMD)","cmd(move(\"left\",40,750))", guardVars ).toString();
	    	sendMsg("moveRover","rover", QActorContext.dispatch, temporaryStr ); 
	    	}};//actionseq
	    	}
	    	else{ {//actionseq
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " not !?leftEdge" )) != null )
	    	{
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmd(CMD)","cmd(move(\"right\",40,750))", guardVars ).toString();
	    	sendMsg("moveRover","rover", QActorContext.dispatch, temporaryStr ); 
	    	}
	    	else{ temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmd(CMD)","cmd(move(\"left\",40,750))", guardVars ).toString();
	    	sendMsg("moveRover","rover", QActorContext.dispatch, temporaryStr ); 
	    	}};//actionseq
	    	}
	    	//switchTo stage1
	        switchToPlanAsNextState(pr, myselfName, "rovermind_"+myselfName, 
	              "stage1",false, false, null); 
	    }catch(Exception e_stage1_managingFixedObject_endloop){  
	    	 println( getName() + " plan=stage1_managingFixedObject_endloop WARNING:" + e_stage1_managingFixedObject_endloop.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//stage1_managingFixedObject_endloop
	    
	    StateFun stage2 = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("stage2",-1);
	    	String myselfName = "stage2";  
	    	//bbb
	     msgTransition( pr,myselfName,"rovermind_"+myselfName,false,
	          new StateFun[]{stateTab.get("stage1_obstacleAvoidingManagement") }, 
	          new String[]{"true","E","sonarDetect" },
	          60000, "handleTout" );//msgTransition
	    }catch(Exception e_stage2){  
	    	 println( getName() + " plan=stage2 WARNING:" + e_stage2.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//stage2
	    
	    StateFun handleAlarm = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleAlarm",-1);
	    	String myselfName = "handleAlarm";  
	    	printCurrentEvent(false);
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("alarm(X)");
	    	if( currentEvent != null && currentEvent.getEventId().equals("alarm") && 
	    		pengine.unify(curT, Term.createTerm("alarm(X)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			String parg = "\"[rovermind] Alarm detected! Halted execution.\"";
	    			/* Print */
	    			parg =  updateVars( Term.createTerm("alarm(X)"), 
	    			                    Term.createTerm("alarm(X)"), 
	    				    		  	Term.createTerm(currentEvent.getMsg()), parg);
	    			if( parg != null ) println( parg );
	    	}
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("alarm(fire)");
	    	if( currentEvent != null && currentEvent.getEventId().equals("alarm") && 
	    		pengine.unify(curT, Term.createTerm("alarm(X)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			//println("WARNING: variable substitution not yet fully implemented " ); 
	    			{//actionseq
	    			temporaryStr = "manual";
	    			addRule( temporaryStr );  
	    			temporaryStr = "\"[rovermind] Switching to manual control plan...\"";
	    			println( temporaryStr );  
	    			};//actionseq
	    	}
	    	//switchTo stage2
	        switchToPlanAsNextState(pr, myselfName, "rovermind_"+myselfName, 
	              "stage2",false, false, " ??manual"); 
	    }catch(Exception e_handleAlarm){  
	    	 println( getName() + " plan=handleAlarm WARNING:" + e_handleAlarm.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleAlarm
	    
	    StateFun handleTout = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    	String myselfName = "handleTout";  
	    	repeatPlanNoTransition(pr,myselfName,"rovermind_"+myselfName,false,true);
	    }catch(Exception e_handleTout){  
	    	 println( getName() + " plan=handleTout WARNING:" + e_handleTout.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleTout
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
